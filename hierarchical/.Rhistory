wilcox.test(marginal$MNCC.u80,marginal$MNBC.acc,paired=TURE)
wilcox.test(marginal$MNCC.u80,marginal$MNBC.acc,paired=TRUE)
wilcox.test(marginal$MNCC.u80,marginal$NCC.u80,paired=TRUE)
marginal$MNCC.u80
sum(marginal$MNCC.u80>marginal$NCC.u80)
sum(marginal$MNCC.u80<marginal$NCC.u80)
sum(joint$MNCC.u80<joint$NCC.u80)
sum(joint$MNCC.u80>joint$NCC.u80)
sum(joint$MNCC.u80==joint$NCC.u80)
wilcox.test(joint$MNCC.u80,joint$NCC.u80,paired=TRUE)
wilcox.test(joint$MNCC.u80,joint$MNBC.acc,paired=TRUE)
wilcox.test(joint$MNCC.u80,joint$NBC.acc,paired=TRUE)
wilcox.test(joint$MNCC.u65,joint$MNBC.acc,paired=TRUE)
wilcox.test(joint$MNCC.u65,joint$MNBC.acc,paired=TRUE)
wilcox.test(marginal$MNCC.u65,marginal$MNBC.acc,paired=TRUE)
wilcox.test(marginal$MNCC.u65,marginal$NBC.acc,paired=TRUE)
wilcox.test(marginal$MNCC.u80,marginal$NBC.acc,paired=TRUE)
wilcox.test(marginal$MNCC.u80,marginal$MNBC.acc,paired=TRUE)
wilcox.test(marginal$MNCC.u65,marginal$MNBC.acc,paired=TRUE)
wilcox.test(marginal$MNCC.u65,marginal$NCC.u65,paired=TRUE)
wilcox.test(marginal$MNCC.u80,marginal$NCC.u80,paired=TRUE)
t.test(marginal$MNCC.u80,marginal$NCC.u80,paired=TRUE)
load("~/Dropbox/research/CredalMulti (1)/gc/jointMarginal.Rdata")
wilcox.test(joint$MNCC.u65,joint$MNBC.acc,paired=TRUE)
joint
wilcox.test(joint$MNCC.u80,joint$MNBC.acc,paired=TRUE)
wilcox.test(joint$MNCC.u80,joint$MNBC.acc,paired=TRUE)
wilcox.test(joint$MNCC.u80,joint$NCC.u65,paired=TRUE)
wilcox.test(joint$MNCC.u80,joint$NCC.u80,paired=TRUE)
wilcox.test(joint$MNCC.u80,joint$NBC.acc,paired=TRUE)
wilcox.test(joint$MNCC.u80,joint$NBC.acc,paired=TRUE)
wilcox.test(joint$MNCC.u80,joint$NCC.u80,paired=TRUE)
wilcox.test(joint$MNCC.u80,joint$NBC.acc,paired=TRUE)
wilcox.test(joint$MNCC.u80,joint$MNCC.u80,paired=TRUE)
wilcox.test(joint$MNCC.u80,joint$MNBC.u80,paired=TRUE)
wilcox.test(marginal$MNCC.u80,marginal$MNBC.u65,paired=TRUE)
wilcox.test(marginal$MNCC.u65,marginal$NCC.u65,paired=TRUE)
wilcox.test(marginal$MNCC.u65,marginal$NBC.acc,paired=TRUE)
wilcox.test(marginal$MNCC.u80,marginal$NBC.acc,paired=TRUE)
wilcox.test(marginal$MNCC.u80,marginal$NCC.u80,paired=TRUE)
wilcox.test(marginal$MNCC.u65,marginal$NCC.u65,paired=TRUE)
t.test(marginal$MNCC.u65,marginal$NCC.u65,paired=TRUE)
t.test(marginal$MNCC.u65,marginal$MNBC.acc,paired=TRUE)
t.test(marginal$MNCC.u80,marginal$MNBC.acc,paired=TRUE)
t.test(marginal$NCC.u80,marginal$MNCC.u80,paired=TRUE)
t.test(marginal$NCC.u65,marginal$MNCC.u65,paired=TRUE)
library("bnlearn", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
?iamb
iamb
ia.markov.blanket
ia.markov.blanket()
indep.test
indep.test()
?entropy
t <- c (93,85,95,91,92,90)
t
t.test()
?t.test
t.test(t,mu = 90)
ttest <- t.test(t,mu = 90)
ttest
ttest$estimate
ttest$parameter
sd(t)
1/(3.4/sqrt(6))
6*0.177/12
qcc
library("qcc", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
pbinom
?pbinom
dbinom(0,10,0.006)
dbinom(1,10,0.006)
dbinom(2,10,0.006)
sqrt(.01*.99/1000)
.06*(1-0.6)/1000
sqrt(.06*(1-0.6)/100)
load("friedmanData.RData")
setwd("~/Documents/devel/tutorialML/hierarchical")
load("friedmanData.RData")
load("friedmanData.RData")
resultsWeka
debugSource('~/Documents/devel/tutorialML/hierarchical/predictive_halfCvalFriedman.R')
predictive_halfCvalFriedman
predictive_halfCvalFriedman()
dsetName
classifierName
unique(classifierName)
how_many_classifiers
dsetsList
how_many_dsets
source('~/Documents/devel/tutorialML/hierarchical/testHalfCval.R')
testHalfCval()
source('~/Documents/devel/tutorialML/hierarchical/testHalfCval.R')
testHalfCval()
source('~/Documents/devel/tutorialML/hierarchical/testHalfCval.R')
source('~/Documents/devel/tutorialML/hierarchical/testHalfCval.R')
testHalfCval()
source('~/Documents/devel/tutorialML/hierarchical/testHalfCval.R')
testHalfCval()
predictive_halfCvalFriedman()
dim(xTrain)
dim(xTest)
stanResults[[counter]]
currentResults$delta_each_dset
hierDeltaEachDset
dim(currentMleDeltaEachDset)
length(currentMleDeltaEachDset)
xMean <- apply(x,1,mean)
length(xMean)
boxplot(xMean)
plot(density(xMean))
plot(density(mleDeltaEachDset))
debugSource('~/Documents/devel/tutorialML/hierarchical/predictive_halfCvalFriedman.R')
plot(density(mleDeltaEachDset))
plot(density(mleDeltaEachDset))
plot(density(xMean))
lines(density(mleDeltaEachDset))
lines(density(mleDeltaEachDset), col='red')
lines(density(hierDeltaEachDset), col='blue')
debugSource('~/Documents/devel/tutorialML/hierarchical/multiple_dsets_rope.R')
multiple_dsets_rope(0.015,0.003,50,300,2,1)
debugSource('~/Documents/devel/tutorialML/hierarchical/multiple_dsets_rope.R')
multiple_dsets_rope(0.015,0.003,50,300,2,1)
dim(delta_acc_each_dset)
length(delta_acc_each_dset)
dim(diff_a_b)
length(diff_a_b)
Diff_ab
dim(Diff_ab)
Diff_ab_orig <- Diff_ab
Diff_ab <- Diff_ab(1:10,)
Diff_ab <- Diff_ab[1:10,]
dim(Diff_ab)
mleEstim <- apply(Diff_ab,1,mean)
length(mleEstim)
mleEstim <- apply(Diff_ab,2,mean)
length(mleEstim)
Diff_abTest <- Diff_ab[11:100,]
Diff_abTest <- Diff_ab_orig[11:100,]
actual <- apply(Diff_abTest,2,mean)
length(actual)
mean(abs(mleEstim-actual))
mean(abs(mleEstim-actual))
actual
mleEstim
mleEstim <- apply(Diff_ab,2,mean)
dim(Diff_ab)
actual <- apply(Diff_abTest,2,mean)
dim(Diff_abTest)
scatter(actual,mleEstim)
scatter.smooth(actual,mleEstim)
scatter.smooth(delta_acc_each_dset,mleEstim)
dim(Diff_ab_orig)
tmp<-Diff_ab_orig[,1]
tmp
delta_acc_each_dset[1]
density(delta_acc_each_dset[1])
plot(density(delta_acc_each_dset[1]))
plot(density(tmp))
plot(density(tmp))
mean(tmp[1:10])
mean(tmp[1:20])
mean(tmp[11:20])
mean(tmp[21:30])
mean(tmp[31:40])
mean(tmp[41:50])
delta_acc_each_dset[1]
mean(Diff_ab_orig[,1])
dim(Diff_ab)
sqrt(mean( (delta_acc_each_dset- stan_prob$delta_each_dset)^2 ))
sqrt(mean( (delta_acc_each_dset- stan_prob$delta_each_dset)^2 ))
sqrt(mean( (delta_acc_each_dset- stan_prob$delta_each_dset)^2 ))
rmse_indep_bay_ttest[k]
sqrt(mean( (delta_acc_each_dset- maxLikMeans)^2 ))
sqrt(mean( (delta_acc_each_dset- stan_prob$delta_each_dset)^2 ))
sample_sizes
delta_acc_each_dset[1]
dim(Diff_ab)
mean(Diff_ab[,1])
mean(Diff_ab_orig[1:10,1])
mean(Diff_ab_orig[11:100,1])
mleEst <- mean(Diff_ab_orig[11:100,1])
mleActual <- mean(Diff_ab_orig[11:100,1])
mleEst <- mean(Diff_ab_orig[1:10,1])
stan_prob$delta_each_dset
stanEst <- stan_prob$delta_each_dset[1]
actual <- delta_acc_each_dset[1]
abs (stanEst- actual)
abs (mleEst- actual)
abs (mleEst- mleActual)
abs (stanEst- mleActual)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("mlbench")
library("mlbench", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mlbench.friedman1(100)
mlbench.friedman1(100,0)
boxplot(mlbench.friedman1(100,0))
mlbench.friedman1(100,0)
tmp <- mlbench.friedman1(100,0)
tmp$x
tmp$y
boxplot(tmp$y)
dim(tmp$x)
dim(tmp$y)
length(tmp$y)
library('scmamp')
install.packages("scmamp")
library("scmamp", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
head(data.gh.2008)
library('scmamp')
install.packages("scmamp")
install.packages("scmamp")
head(data.gh.2008)
library('scmamp')
install.packages("caret")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
control <- trainControl(method="repeatedcv", number=10, repeats=3)
currentSeed<-7
set.seed(currentSeed)
data(PimaIndiansDiabetes)
PimaIndiansDiabetes
PimaIndiansDiabetes$diabetes
control <- trainControl(method="repeatedcv", number=10, repeats=3)
currentSeed<-7
set.seed(currentSeed)
fit.cart <- train(diabetes~., data=PimaIndiansDiabetes, method="rpart", trControl=control)
install.packages("e1071")
set.seed(currentSeed)
data(PimaIndiansDiabetes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
currentSeed<-7
set.seed(currentSeed)
fit.cart <- train(diabetes~., data=PimaIndiansDiabetes, method="rpart", trControl=control)
fit.cart
set.seed(currentSeed)
fit.lda <- train(diabetes~., data=PimaIndiansDiabetes, method="lda", trControl=control)
fit.lda
fit.cart <- train(diabetes~., data=PimaIndiansDiabetes, method="rpart", trControl=control,tuneGrid=NULL)
fit.cart
fit.cart <- train(diabetes~., data=PimaIndiansDiabetes, method="rpart1SE", trControl=control,tuneGrid=NULL)
fit.cart
set.seed(currentSeed)
fit.lda <- train(diabetes~., data=PimaIndiansDiabetes, method="lda", trControl=control)
fit.lda
set.seed(currentSeed)
fit.svm <- train(diabetes~., data=PimaIndiansDiabetes, method="svmRadial", trControl=control)
set.seed(currentSeed)
fit.svm <- train(diabetes~., data=PimaIndiansDiabetes, method="svmRadial", trControl=control)
fit.svm
set.seed(currentSeed)
fit.knn <- train(diabetes~., data=PimaIndiansDiabetes, method="knn", trControl=control)
fit.knn
fit.cart <- train(diabetes~., data=PimaIndiansDiabetes, method="rpart1SE", trControl=control,tuneGrid=NULL, tuneLength = 4)
fit.cart
fit.knn <- train(diabetes~., data=PimaIndiansDiabetes, method="knn", trControl=control, tuneLength = 4)
set.seed(currentSeed)
fit.knn <- train(diabetes~., data=PimaIndiansDiabetes, method="knn", trControl=control, tuneLength = 4)
fit.knn
set.seed(currentSeed)
fit.knn <- train(diabetes~., data=PimaIndiansDiabetes, method="knn", trControl=control, tuneLength = 1)
fit.knn
set.seed(currentSeed)
fit.rf <- train(diabetes~., data=PimaIndiansDiabetes, method="rf", trControl=control, tuneLength = 1)
set.seed(currentSeed)
fit.rf <- train(diabetes~., data=PimaIndiansDiabetes, method="rf", trControl=control, tuneLength = 1)
fit.rf <- train(diabetes~., data=PimaIndiansDiabetes, method="rf", trControl=control, tuneLength = 1)
fit.rf
set.seed(currentSeed)
fit.svm <- train(diabetes~., data=PimaIndiansDiabetes, method="svmRadial", trControl=control, tuneLength = 1)
fit.svm
fit.cart <- train(diabetes~., data=PimaIndiansDiabetes, method="rpart1SE", trControl=control,tuneGrid=NULL, tuneLength = 1)
fit.cart
fit.lda
fit.lda <- train(diabetes~., data=PimaIndiansDiabetes, method="lda", trControl=control, tuneLength = 1)
fit.svm <- train(diabetes~., data=PimaIndiansDiabetes, method="svmRadial", trControl=control, tuneLength = 1)
fit.svm
fit.knn
fit.rf
fit.lda
fit.knn
fit.svm
fit.rf
fit.svm$method
fit.svm$modelInfo
fit.svm$modelType
fit.svm$results
fit.svm$pred
fit.svm$bestTune
fit.svm$call
fit.svm$dots
fit.svm$metric
fit.svm$control
fit.svm$control$repeats
fit.svm$control$sampling
fit.svm$resample
pippo<-fit.svm$resample
pippo
pippo$Accuracy
length(pippo$Accuracy)
fit.cart$resample
pippo <- fit.cart$resample
fit.cart$trainingData
pippo <- fit.cart$trainingData
fit.cart$sampling
fit.cart$metric
fit.cart$control$preProcOptions
fit.cart$control$sampling
fit.cart$control$index
cart <- fit.cart$control$index
cart
dim(cart)
calss(cart)
class(cart)
cart[[1]]
cart[1]
cart[2]
hist(cart[1])
cart[1]
class(cart[1])
cart[1][[1]]
class(cart[1][[1]])
plot(cart[1][[1]])
plot(cart[1][[2]])
plot(cart[[1]])
plot(cart[[1]])
plot(cart[[2]])
mean(cart[[2]])
mean(cart[[1]])
svm <- fit.svm$control$index
mean(cart[[1]])
mean(svm[[1]])
mean(svm[[2]])
mean(cart[[2]])
currentSeed<-7
set.seed(currentSeed)
set.seed(currentSeed)
set.seed(currentSeed)
fit.cart <- train(diabetes~., data=PimaIndiansDiabetes, method="rpart1SE", trControl=control,tuneGrid=NULL, tuneLength = 1)
set.seed(currentSeed)
fit.lda <- train(diabetes~., data=PimaIndiansDiabetes, method="lda", trControl=control, tuneLength = 1)
set.seed(currentSeed)
fit.svm <- train(diabetes~., data=PimaIndiansDiabetes, method="svmRadial", trControl=control, tuneLength = 1)
set.seed(currentSeed)
fit.knn <- train(diabetes~., data=PimaIndiansDiabetes, method="knn", trControl=control, tuneLength = 1)
set.seed(currentSeed)
fit.rf <- train(diabetes~., data=PimaIndiansDiabetes, method="rf", trControl=control, tuneLength = 1)
svm <- fit.svm$control$index
cart <- fit.cart$control$index
mean(cart[[1]])
mean(svm[[1]])
mean(svm[[10]])
mean(cart[[10]])
fit.svm$resample
fit.svm$resample$Accuracy
set.seed(currentSeed)
fit.rf <- train(diabetes~., data=PimaIndiansDiabetes, method="rf", trControl=control, tuneLength = 1)
rfAccuracy <- fit.rf$resample$Accuracy
ldaAccuracy <- fit.lda$resample$Accuracy
svmAccuracy <- fit.svm$resample$Accuracy
knnAccuracy <- fit.knn$resample$Accuracy
rfAccuracy <- fit.rf$resample$Accuracy
rfAccuracy
data <- mlbench.friedman1(n, sd=1)
data <- mlbench.friedman1(n, sd=1)
data <- mlbench.friedman1(n, sd=1)
library(mlbench)
library(caret)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
currentSeed<-7
data <- mlbench.friedman1(n, sd=1)
library(mlbench)
library(caret)
data(PimaIndiansDiabetes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
currentSeed<-7
data <- mlbench.friedman1(n, sd=1)
data <- mlbench.friedman1(100, sd=1)
set.seed(currentSeed)
data <- mlbench.friedman1(100, sd=1)
class <- data$y
class
Y <- cut(class,c(5,10,20))
class <- data$y
data <- mlbench.friedman1(n, sd=1)
data <- mlbench.friedman1(100, sd=1)
class <- data$y
class
Y <- cut(class,c(5,10,20))
Y
Y <- cut(class,c(5,10,20),right=FALSE)
Y
0:50/50
0:3/3
?cut
data <- mlbench.friedman1(100, sd=1)
cut.vec <- cut(
cut.vec <- cut(data$y, breaks=quantile(class, 0:3/3), include.lowest=T)
cut.vec <- cut(data$y, breaks=quantile(class, 0:3/3), include.lowest=T) )
cut.vec <- cut(data$y, breaks=quantile(class, 0:3/3), include.lowest=T)
cut.vec
cut.vec <- cut(data$y, breaks=quantile(class, 0:3/3), include.lowest=T, right=FALSE)
cut.vec
breaks
data <- mlbench.friedman1(100, sd=1)
breaks=quantile(data$y, 0:3/3)
breaks
summary(data$y)
cut.vec <- cut(data$y, breaks=quantile(data$y, 0:3/3), include.lowest=T, right=FALSE)
cut.vec
cut.vec <- cut(data$y, breaks=quantile(data$y, 0:3/3), include.lowest=T, right=FALSE, label=FALSE)
cut.vec
set.seed(currentSeed)
data$x
dim(data$x)
data <- mlbench.friedman1(100, sd=1)
cut.vec <- cut(data$y, breaks=quantile(data$y, 0:3/3), include.lowest=T, right=FALSE, label=FALSE)
data$class <- cut.vec
data$class
summary(data.class())
summary(data.class
summary(data.class)
data <- mlbench.friedman1(100, sd=1)
cut.vec <- cut(data$y, breaks=quantile(data$y, 0:3/3), include.lowest=T, right=FALSE, label=FALSE)
data$class <- cut.vec
summary(data.class)
data <- mlbench.friedman1(100, sd=1)
cut.vec <- cut(data$y, breaks=quantile(data$y, 0:3/3), include.lowest=T, right=FALSE, label=FALSE)
cut.vec
summary(cut.vec)
sum(cut.vec==1)
sum(cut.vec==2)
sum(cut.vec==3)
fit.cart <- train(data$y, data$class, method="rpart1SE", trControl=control,tuneGrid=NULL, tuneLength = 1)
data <- mlbench.friedman1(100, sd=1)
cut.vec <- cut(data$y, breaks=quantile(data$y, 0:3/3), include.lowest=T, right=FALSE, label=FALSE)
data$class <- cut.vec
#we set the seed before running each classifier in order to generate paired folds.cart[1]
set.seed(currentSeed)
data$class
class(data$class)
cut.vec <- cut(data$y, breaks=quantile(data$y, 0:3/3), include.lowest=T, right=FALSE, label=TRUE)
data <- mlbench.friedman1(100, sd=1)
cut.vec <- cut(data$y, breaks=quantile(data$y, 0:3/3), include.lowest=T, right=FALSE, label=TRUE)
data$class <- cut.vec
set.seed(currentSeed)
fit.cart <- train(data$y, data$class, method="rpart1SE", trControl=control,tuneGrid=NULL, tuneLength = 1)
class(data$class)
data$class
data <- mlbench.friedman1(100, sd=1)
cut.vec <- cut(data$y, breaks=quantile(data$y, 0:3/3), include.lowest=T, right=FALSE)
data$class <- cut.vec
data$class
set.seed(currentSeed)
fit.cart <- train(data$y, data$class, method="rpart1SE", trControl=control,tuneGrid=NULL, tuneLength = 1)
cartAccuracy <- fit.cart$resample$Accuracy
set.seed(currentSeed)
fit.lda <- train(diabetes~., data=PimaIndiansDiabetes, method="lda", trControl=control, tuneLength = 1)
ldaAccuracy <- fit.lda$resample$Accuracy
set.seed(currentSeed)
fit.svm <- train(diabetes~., data=PimaIndiansDiabetes, method="svmRadial", trControl=control, tuneLength = 1)
svmAccuracy <- fit.svm$resample$Accuracy
set.seed(currentSeed)
fit.knn <- train(diabetes~., data=PimaIndiansDiabetes, method="knn", trControl=control, tuneLength = 1)
knnAccuracy <- fit.knn$resample$Accuracy
set.seed(currentSeed)
fit.rf <- train(diabetes~., data=PimaIndiansDiabetes, method="rf", trControl=control, tuneLength = 1)
rfAccuracy <- fit.rf$resample$Accuracy
fit.rf
fit.cart
set.seed(currentSeed)
fit.lda <- train(data$y, data$class, method="lda", trControl=control, tuneLength = 1)
fit.cart <- train(data$x, data$class, method="rpart1SE", trControl=control,tuneGrid=NULL, tuneLength = 1)
cartAccuracy <- fit.cart$resample$Accuracy
set.seed(currentSeed)
fit.lda <- train(data$x, data$class, method="lda", trControl=control, tuneLength = 1)
ldaAccuracy <- fit.lda$resample$Accuracy
set.seed(currentSeed)
fit.lda <- train(data$x, data$class, method="lda", trControl=control, tuneLength = 1)
fit.lda
set.seed(currentSeed)
fit.cart <- train(data$x, data$class, method="rpart1SE", trControl=control,tuneGrid=NULL, tuneLength = 1)
cartAccuracy <- fit.cart$resample$Accuracy
set.seed(currentSeed)
fit.lda <- train(data$x, data$class, method="lda", trControl=control, tuneLength = 1)
ldaAccuracy <- fit.lda$resample$Accuracy
set.seed(currentSeed)
fit.svm <- train(diabetes~., data=PimaIndiansDiabetes, method="svmRadial", trControl=control, tuneLength = 1)
svmAccuracy <- fit.svm$resample$Accuracy
detach("package:mlbench", unload=TRUE)
library("mlbench", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
data <- mlbench.friedman1(100, sd=0)
data <- mlbench.friedman1(100, sd=0)
summary(data$y)
data <- mlbench.friedman1(100, sd=1)
data <- mlbench.friedman1(10000, sd=1)
summary(data)
data <- mlbench.friedman1(10000, sd=1)
summary(data$y)
data <- mlbench.friedman1(10000, sd=10)
summary(data$y)
?"array"
array(dim=c(2,2,2))
actualAcc <- matrix(ncol = length(classifier), nrow = length(redundantFeats)*length(sampleSizes)*length(noise))
redundantFeats <- c (0,10,100)
sampleSizes <- c(30, 300)
noise <- c(1)
classifier <- c('lda','cart')
#actualAcc is matrix, whose rows are the different classifiers and whose columns are the different settings
actualAcc <- matrix(ncol = length(classifier), nrow = length(redundantFeats)*length(sampleSizes)*length(noise))
array(dim=c(3,dim(actualAcc)))
