p
p$a <- NULL
p
subset(df, select = -c(a,c) )
p<- data.frame(a,b)
subset(p,select = -c(b))
subset(p,select = -c(a))
with(p,rm(a))
within(p,rm(a))
within(p,rm(b))
p
p<- data.frame(a,b)
p
p <- data.frame(a,b)
p
rm (p)
p <- data.frame(a,b)
p
a
b
c <- data.frame(a,b)
within(c,rm(b))
within(c,rm(b))
cvalFriedmanAccuracy()
actualAccFriedman3
actualAccFriedman3$friedmanType <- NULL
actualAccFriedman3
rbind(actualAccFriedman1, actualAccFriedman2)
rbind(actualAccFriedman1, actualAccFriedman3)
friedmanType <- 3
csvFilename <- paste('csvResults/actualAccFriedman',friedmanType,".csv",sep='')
write.matrix(actualAccFriedman3,file=csvFilename, sep=",")
debugSource('~/Documents/devel/tutorialML/hierarchical/actualFriedmanAccuracy.R')
actualFriedmanAccuracy(1,1)
settings
names(settings)
names(settings)
actualFriedmanAccuracy(1,1)
names(settings)
names(settings)
friedmanType <- 4
friedmanType <- 3
actualFileName <- paste('csvResults/actualAccFriedman',friedmanType,'.csv',sep = '')
actualAccFriedman <- read.csv(actualFileName)
actualAccFriedman
rm(list=ls())
source('~/Documents/devel/tutorialML/hierarchical/analyzeFriedmanResults.R')
analyzeFriedmanResults(4)
rbind(actualAccFriedman1,actualAccFriedman2)
rbind(actualAccFriedman1,actualAccFriedman2,actualAccFriedman3)
source('~/Documents/devel/tutorialML/hierarchical/analyzeFriedmanResults.R')
source('~/Documents/devel/tutorialML/hierarchical/analyzeFriedmanResults.R')
source('~/Documents/devel/tutorialML/hierarchical/analyzeFriedmanResults.R')
source('~/Documents/devel/tutorialML/hierarchical/analyzeFriedmanResults.R')
analyzeFriedmanResults(4)
cvalAccFriedman
repetitions
dim(cvalAccFriedman)
2700/54
debugSource('~/Documents/devel/tutorialML/hierarchical/analyzeFriedmanResults.R')
res <- analyzeFriedmanResults(4)
res$dsetResults
res$HierBeatsMLeJointMae
mean(res$HierBeatsMLeJointMae)
length(res$HierBeatsMLeJointMae)
boxplot(res$dsetResults$maeHier,res$dsetResults$maeMle)
friedmanType <- 1
actualFileName <- paste('csvResults/actualAccFriedman',friedmanType,'.csv',sep = '')
actualAccFriedman <- read.csv(actualFileName)
actualAccFriedman
mean(actualAccFriedman)
mean(actualAccFriedman$ldaAccuracy, actualAccFriedman$knnAccuracy, actualAccFriedman$cartAccuracy)
mean(actualAccFriedman$ldaAccuracy)
mean(actualAccFriedman$knnAccuracy)
mean(actualAccFriedman$cartAccuracy)
median(actualAccFriedman$cartAccuracy)
median(actualAccFriedman$ldaAccuracy)
median(actualAccFriedman$knnAccuracy)
rgamma(10000, shape=1, rate=0.0345)
tmp <- rgamma(10000, shape=1, rate=0.0345)
plot(density(tmp))
mean(tmp)
min(tmp)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source ("hierarchical_test.R")
stdUpperBound <- 1000
standardization <- 1
chains = 8
load("uci_data.RData")
runID <- uci_classification$Key.Run
foldID <- runID*10+foldID-10
library(MASS)
library(matrixStats)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source ("hierarchical_test.R")
std_upper_bound <- 1000
standardization <- 1 #we run on standardized data
load("uci_data.RData")
#to have maximum reliability when comparing real classifiers
chains = 8
dsetId<- uci_classification$DatasetID
classifierId <- uci_classification$ClassifierID
#we run on accuracy
score <- uci_classification$Percent.correct
foldID <- uci_classification$Key.Fold
nFolds <- max (foldID)
rho=1/nFolds
load("uci_data.RData")
runID <- uci_classification$Key.Run
load("uci_data.RData")
load("uci_data.RData")
runID <- uci_classification$Key.Run
foldID <- uci_classification$Key.Fold
nFolds <- max (foldID)
rho=1/nFolds
foldID <- runID*10+foldID-10
rope_min  <- -0.01
rope_max  <- 0.01
results <- cbind (uci_classification$ClassifierID, uci_classification$DatasetID, uci_classification$Percent.correct, foldID)
load("uci_data.RData")
runID <- uci_classification$Key.Run
foldID <- uci_classification$Key.Fold
nFolds <- max (foldID)
rho=1/nFolds
foldID <- runID*10+foldID-10
rope_min  <- -0.01
rope_max  <- 0.01
results <- cbind (uci_classification$ClassifierID, uci_classification$DatasetID, uci_classification$Percent.correct, foldID)
results1  <- results[classifierId==class1,]
results2  <- results[classifierId==class2,]
class1 <- 1
class2 <- 2
results1  <- results[classifierId==class1,]
results2  <- results[classifierId==class2,]
stopifnot( mean (results1[,c(2,4)]==results2[,c(2,4)]) == 1)
diffIJ <- cbind (results1[,2] , results1[,3]-results2[,3])
x<-matrix(ncol  = max(foldID), nrow = how_many_dsets )
load("uci_data.RData")
rho=1/nFolds
rm(list=ls())
load("uci_data.RData")
nFolds <- max (uci_classification$Key.Fold)
rho=1/nFolds
nFolds
rho
foldID <- uci_classification$Key.Run*10+uci_classification$Key.Fold-10
foldID
rope_min  <- -0.01
rope_max  <- 0.01
results <- cbind (uci_classification$ClassifierID, uci_classification$DatasetID, uci_classification$Percent.correct, foldID)
results1  <- results[classifierId==class1,]
results2  <- results[classifierId==class2,]
stopifnot( mean (results1[,c(2,4)]==results2[,c(2,4)]) == 1)
function (x, ...)
class1 <- 1
class2 <- 2
results <- cbind (uci_classification$ClassifierID, uci_classification$DatasetID, uci_classification$Percent.correct, foldID)
results1  <- results[classifierId==class1,]
results2  <- results[classifierId==class2,]
stopifnot( mean (results1[,c(2,4)]==results2[,c(2,4)]) == 1)
class1
stopifnot( mean (results1[,c(2,4)]==results2[,c(2,4)]) == 1)
results1  <- results[classifierId==class1,]
stdUpperBound <- 1000
standardization <- 1
#to have maximum reliability when comparing real classifiers
chains = 8
load("uci_data.RData")
nFolds <- max (uci_classification$Key.Fold)
rho=1/nFolds
#this foldID goes between 1 and 100
foldID <- uci_classification$Key.Run*10+uci_classification$Key.Fold-10
rope_min  <- -0.01
rope_max  <- 0.01
#prepare the data for  the hierarchical test
results <- cbind (uci_classification$ClassifierID, uci_classification$DatasetID, uci_classification$Percent.correct, foldID)
results1  <- results[classifierId==class1,]
results2  <- results[classifierId==class2,]
results
results <- data.frame (uci_classification$ClassifierID, uci_classification$DatasetID, uci_classification$Percent.correct, foldID)
results
results <- data.frame (classifierID = uci_classification$ClassifierID,
results <- data.frame (uci_classification$ClassifierID, uci_classification$DatasetID, uci_classification$Percent.correct, foldID)
rope_min  <- -0.01
rope_max  <- 0.01
results <- data.frame (classifierID = uci_classification$ClassifierID,
dsetID=uci_classification$DatasetID,
accuracy=uci_classification$Percent.correct,
fold=foldID)
results
results$classifierID
plot(results$classifierID)
source('~/Documents/devel/tutorialML/hierarchical/sensitivityNormalStudent.R')
resutls
results
results[1:10,]
results[results$classifierID==1,]
results1  <- results[results$classifierID==class1,]
results2  <- results[results$classifierID==class2,]
stopifnot( mean (results1[,c(2,4)]==results2[,c(2,4)]) == 1)
diffIJ <- cbind (results1[,2] , results1[,3]-results2[,3])
results1
results2
results$dsetIDresults[results$classifierID==class1,]
results[results$classifierID==class1,]$accuracy
results1  <- results[results$classifierID==class1,]
results2  <- results[results$classifierID==class2,]
stopifnot( mean (results1[,c(2,4)]==results2[,c(2,4)]) == 1)
results1
diffResults  <- results[results$classifierID==class1,]
diffResults$accuracy
diffResults  <- results[results$classifierID==class1,]
results2  <- results[results$classifierID==class2,]
stopifnot( mean (diffResults$dsetID==results2$classifierID) ==1)
stopifnot( mean (diffResults$dsetID==results2$dsetID) ==1)
length(unique(diffResults$dsetID))
max(diffResults$dsetID))
max(diffResults$dsetID)
howManyDsets <- max(diffResults$dsetID)
howManyDsets
x<-matrix(ncol  = max(foldID), nrow =  howManyDsets)
for (dsetIdx in 1:howManyDsets) {
tmp <- diffIJ [diffIJ[,1] == dsetIdx,]
x[dsetIdx,]  <- t (tmp [,2])
}
x
class1
class2
class!1
class1
class2
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source ("hierarchical_test.R")
#preliminaries
stdUpperBound <- 1000
standardization <- 1
#to have maximum reliability when comparing real classifiers
chains = 8
load("uci_data.RData")
nFolds <- max (uci_classification$Key.Fold)
rho=1/nFolds
#this foldID goes between 1 and 100
foldID <- uci_classification$Key.Run*10+uci_classification$Key.Fold-10
rope_min  <- -0.01
rope_max  <- 0.01
#prepare the data for  the hierarchical test
results <- data.frame (classifierID = uci_classification$ClassifierID,
dsetID=uci_classification$DatasetID,
accuracy=uci_classification$Percent.correct,
fold=foldID)
#NEED TO SUBSET THE DATA FRAME
diffResults  <- results[results$classifierID==class1,]
results2  <- results[results$classifierID==class2,]
stopifnot( mean (diffResults$dsetID==results2$dsetID) ==1)
diffResults$diff <- diffResults$accuracy - results2$accuracy
#build matrix of results to be parsed by hierarchical test
howManyDsets <- max(diffResults$dsetID)
x<-matrix(ncol  = max(foldID), nrow =  howManyDsets)
for (dsetIdx in 1:howManyDsets) {
tmp <- diffIJ [diffIJ[,1] == dsetIdx,]
x[dsetIdx,]  <- t (tmp [,2])
}
class1
class2
simulationID <- paste('class',class1,'class',class2,"Kruschke.dat",sep ='')
hierPosteriorKru <- hierarchical.test (x,rho,rope_min,rope_max,simulationID,std_upper_bound,samplingType,chains)
simulationID <- paste('class',class1,'class',class2,"Kruschke.dat",sep ='')
hierPosteriorKru <- hierarchical.test (x,rho,rope_min,rope_max,simulationID,stdUpperBound,samplingType,chains)
simulationID <- paste('class',class1,'class',class2,"Kruschke.dat",sep ='')
hierPosteriorKru <- hierarchical.test (x,rho,rope_min,rope_max,simulationID,stdUpperBound,"studentKruschke",chains)
simulationID <- paste('class',class1,'class',class2,"Juanez.dat",sep ='')
hierPosteriorJua <- hierarchical.test (x,rho,rope_min,rope_max,simulationID,stdUpperBound,"studentJuanez",chains)
simulationID <- paste('class',class1,'class',class2,"GC.dat",sep ='')
hierPosterior <- hierarchical.test (x,rho,rope_min,rope_max,simulationID,stdUpperBound,"student",chains)
simulationID <- paste('class',class1,'class',class2,"Gaussian.dat",sep ='')
hierPosteriorGauss <- hierarchical.test (x,rho,rope_min,rope_max,simulationID,stdUpperBound,"gaussian",chains)
summary(hierPosteriorGauss$delta0)
summary(hierPosteriorGauss$stanResults$delta0)
summary(hierPosteriorKru$stanResults$delta0)
summary(hierPosteriorJua$stanResults$delta0)
summary(hierPosterior$stanResults$delta0)
boxplot(hierPosterior$stanResults$delta0,hierPosteriorKru$stanResults$delta0,hierPosteriorJua$stanResults$delta0,hierPosteriorGauss$stanResults$delta0)
boxplot(diffResults$diff)
summary(diffResults$diff)
apply(x,margin=1,mean)
apply(x,mean,margin=1)
apply(x,1,mean)
diffIJ
dsetIdx
tmp <- diffResults$diff[diffResults$dsetID == dsetIdx,]
tmp <- diffResults$diff[diffResults$dsetID == dsetIdx]
y<-x
y
tmp
t(tmp)
t(tmp[,2])
for (dsetIdx in 1:howManyDsets) {
tmp <- diffResults$diff[diffResults$dsetID == dsetIdx]
x[dsetIdx,]  <- t (tmp)
}
for (dsetIdx in 1:howManyDsets) {
tmp <- diffResults$diff[diffResults$dsetID == dsetIdx]
x[dsetIdx,]  <- t (tmp)
}
for (dsetIdx in 1:howManyDsets) {
tmp <- diffResults$diff[diffResults$dsetID == dsetIdx]
x[dsetIdx,]  <- t (tmp)
}
x
x == y
mean(x == y)
x<-matrix(ncol  = max(foldID), nrow =  howManyDsets)
for (dsetIdx in 1:howManyDsets) {
tmp <- diffResults$diff[diffResults$dsetID == dsetIdx]
x[dsetIdx,]  <- t (tmp)
}
x == y
mean (x == y)
summary(hierPosterior$stanResults$delta0)
apply(x,1,mean)
mean (apply(x,1,mean))
rho
1/10
rope_min
rope_max
simulationID <- paste('class',class1,'class',class2,"Kruschke",sep ='')
hierPosteriorKru <- hierarchical.test (x,rho,rope_min,rope_max,simulationID,stdUpperBound,"studentKruschke",chains)
hierPosteriorKru
hierPosteriorKru$delta0
summary(hierPosteriorKru$stanResults$delta0)
hierPosteriorKru$stdX *
1
summary(hierPosteriorKru$stanResults$delta0 * hierPosteriorKru$stdX)
summary(hierPosteriorKru$stanResults$delta0 * hierPosteriorKru$stdX , hierPosteriorJua$stanResults$delta0 * hierPosteriorJua$stdX)
boxplot(hierPosteriorKru$stanResults$delta0 * hierPosteriorKru$stdX , hierPosteriorJua$stanResults$delta0 * hierPosteriorJua$stdX)
boxplot(hierPosteriorKru$stanResults$delta0 * hierPosteriorKru$stdX , hierPosteriorJua$stanResults$delta0 * hierPosteriorJua$stdX, hierPosterior$stanResults$delta0 * hierPosterior$stdX )
boxplot(hierPosteriorKru$stanResults$delta0 * hierPosteriorKru$stdX , hierPosteriorJua$stanResults$delta0 * hierPosteriorJua$stdX, hierPosterior$stanResults$delta0 * hierPosterior$stdX, hierPosteriorGauss$stanResults$delta0 * hierPosteriorGauss$stdX )
hierPosteriorGauss$delta0
hierPosteriorJua$delta0
hierPosteriorKru$delta0
hierPosterior$delta0
hierPosteriorKru$delta_each_dset
boxplot(hierPosteriorKru$delta_each_dset)
summary(hierPosteriorKru$delta_each_dset)
summary(hierPosteriorGauss$delta_each_dset)
cor(hierPosteriorGauss$delta_each_dset,hierPosteriorKru$delta_each_dset)
plot(hierPosteriorGauss$delta_each_dset,hierPosteriorKru$delta_each_dset)
scatter.smooth(hierPosteriorGauss$delta_each_dset,hierPosteriorKru$delta_each_dset)
scatter.smooth(hierPosteriorJua$delta_each_dset,hierPosteriorKru$delta_each_dset)
scatter.smooth(hierPosterior$delta_each_dset,hierPosteriorKru$delta_each_dset)
scatter.smooth(hierPosterior$delta_each_dset,hierPosteriorKru$delta_each_dset)
mean(abs(hierPosteriorGauss$delta_each_dset-hierPosterior$delta_each_dset))
mean(abs(hierPosteriorJua$delta_each_dset-hierPosterior$delta_each_dset))
summary(hierPosteriorGauss$delta_each_dset * hierPosteriorGauss$stdX)
0.0005077 + -0.0042530
summary(hhierPosteriorKru$delta_each_dset * hierPosteriorKru$stdX)
summary(hierPosteriorKru$delta_each_dset * hierPosteriorKru$stdX)
0.0003175 + 0.0052350
plot (density(hierPosteriorKru$delta0))
plot (density(hierPosteriorKru$delta0))
plot (density(hierPosteriorKru$stanResults$delta0 * hierPosteriorKru$stdX ))
plot (density(hierPosteriorGauss$stanResults$delta0 * hierPosteriorGauss$stdX ), add = TRUE)
lines (density(hierPosteriorGauss$stanResults$delta0 * hierPosteriorGauss$stdX ))
lines (density(hierPosteriorGauss$stanResults$delta0 * hierPosteriorGauss$stdX ))
lines (density(hierPosteriorKru$stanResults$delta0 * hierPosteriorGauss$stdX ))
x
mleMeans <- apply (x, 2, mean)
mleMeans
mleMeans <- apply (x, 1, mean)
mleMeans
lines (mleMeans)
lines (mleMeans)
warnings()
lines (mleMeans)
lines (mleMeans)
lines (density(mleMeans))
HPDinterval(as.mcmc(hierPosterior$stanResults$delta0 * hierPosterior$stdX), prob=0.9)
library(coda) #for computing the HDP interval
HPDinterval(as.mcmc(hierPosterior$stanResults$delta0 * hierPosterior$stdX), prob=0.9)
?HPDinterval
data (line)
data
line
line$line1
line$line2
HPDinterval(line)
HPDinterval( hierPosterior$stanResults$delta0   )
coda::HPDinterval(coda::as.mcmc(as.vector(hierPosterior$stanResults$delta0))))
coda::HPDinterval(coda::as.mcmc(as.vector(hierPosterior$stanResults$delta0)))
coda::HPDinterval(coda::as.mcmc(as.vector(hierPosterior$stanResults$delta0 * hierPosterior * stdX)))
coda::HPDinterval(coda::as.mcmc(as.vector(hierPosterior$stanResults$delta0 * hierPosterior$stdX)))
coda::HPDinterval(coda::as.mcmc(as.vector(hierPosteriorGauss$stanResults$delta0 * hierPosterior$stdX)))
hierPosterior$delta0
tmp <- coda::HPDinterval(coda::as.mcmc(as.vector(hierPosterior$stanResults$delta0 * hierPosterior$stdX)))
tmp
class(tmp)
View(tmp)
View(tmp)
tmp$var1
tmp[1,1]
tmp[1,2]
tmp[2,2]
tmp[2,1]
class(tmp)
tmo
tmp
tmp[1]
tmp[2]
debugSource('~/Documents/devel/tutorialML/hierarchical/sensitivityNormalStudent.R')
sensitivityNormalStudent()
debugSource('~/Documents/devel/tutorialML/hierarchical/sensitivityNormalStudent.R')
sensitivityNormalStudent()
sensitivityNormalStudent()
sensitivityNormalStudent(1,2)
library(coda) #for computing the HDP interval
coda::HPDinterval(coda::as.mcmc(as.vector(stanResults$delta0 * stdX)))
HDP
HDP[1]
HDP[2]
HDP[1]
list("right"=prob_right_delta0, "left"=prob_left_delta0, "rope"=prob_rope_delta0, "positive"=prob_positive_delta0,"negative"=prob_negative_delta0,
"HDPlower"= HDP[1], "HDPupper"=HPD[2])
source('~/Documents/devel/tutorialML/hierarchical/hierarchical_test.R')
sensitivityNormalStudent(1,2)
hierPosteriorKru
hierPosteriorKru$delta0$HDPlower
hierPosteriorKru$delta0$HDPupper
debugSource('~/Documents/devel/tutorialML/hierarchical/sensitivityNormalStudent.R')
sensitivityNormalStudent(1,2)
p <- matrix(5,4)
ncol(p)
p <- matrix(nrpw=5,ncol=4)
p <- matrix(nrow=5,ncol=4)
ncol
ncol(p)
hierPosterior$stanResults$delta
dim(hierPosterior$stanResults$delta)
dim(hierPosterior$stanResults$delta)[1]
hierPosterior$stanResults$delta
hierPosterior$stanResults$delta[1][8000]
hierPosterior$stanResults$delta[8000][1]
currentSample <- 100
currentDset <- 10
hierPosteriorGauss$stanResults$delta[currentSample][currentDset]
hierPosteriorGauss$stanResults$delta
hierPosteriorGauss$stanResults$delta[100][2]
hierPosteriorGauss$stanResults$delta[1][100]
dim(hierPosteriorGauss$stanResults$delta)
tmp <- hierPosteriorGauss$stanResults$delta[,1]
tmp
r,vn
rmvn
rmvn
source('~/Documents/devel/tutorialML/hierarchical/logPredictive.R')
library("mvtnorm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
?rep
log(2.6)
log(10)
debugSource('~/Documents/devel/tutorialML/hierarchical/sensitivityNormalStudent.R')
sensitivityNormalStudent(1,2)
debugSource('~/Documents/devel/tutorialML/hierarchical/sensitivityNormalStudent.R')
sensitivityNormalStudent(1,2)
dim(trainX)
dim(testX)
trainX <- x[,1:(ncol(x)/2)]
dim(trainX)
source('~/Documents/devel/tutorialML/hierarchical/sensitivityNormalStudent.R')
sensitivityNormalStudent(1,2)
dim(trainX)
dim(testX)
[,1:(ncol(x)/2)]
1:(ncol(x)/2)
(ncol(x)/2 + 1):ncol(x)
halfPosteriorKru
logPredictive(halfPosteriorKru,testX)
logPredictive(halfPosteriorKru,testX, rho)
logPredictive(halfPosteriorKru,testX, rho)
debugSource('~/Documents/devel/tutorialML/hierarchical/sensitivityNormalStudent.R')
source('~/Documents/devel/tutorialML/hierarchical/sensitivityNormalStudent.R')
source('~/Documents/devel/tutorialML/hierarchical/sensitivityNormalStudent.R')
sensitivityNormalStudent(1,2)
currentMu
currentMu
currentSigma
fittedModel$delta[1][1]
fittedModel$stanResults$delta[1][1]
fittedModel$stanResults$sigma[1][1]
covarMatrix
source('~/Documents/devel/tutorialML/hierarchical/logPredictive.R')
sensitivityNormalStudent(1,2)
pmvnorm(mean=currentMu,sigma = currentSigma)
pmvnorm(mean=currentMu,sigma = currentSigma)
pmvnorm
pmvnorm()
pmvnporm
pmvnorm
?pmvnorm
source('~/Documents/devel/tutorialML/hierarchical/logPredictive.R')
source('~/Documents/devel/tutorialML/hierarchical/logPredictive.R')
source('~/Documents/devel/tutorialML/hierarchical/logPredictive.R')
source('~/Documents/devel/tutorialML/hierarchical/logPredictive.R')
source('~/Documents/devel/tutorialML/hierarchical/logPredictive.R')
source('~/Documents/devel/tutorialML/hierarchical/logPredictive.R')
log (dmvnorm( x=testX[currentDset,], mean=currentMu,sigma = currentSigma) )
dim(currentMu)
source('~/Documents/devel/tutorialML/hierarchical/logPredictive.R')
